/**
 * stocks operations:
    - getStock
    - getStockPrices
    - listStocks
 */

// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
import type { ListStocks200Response, GetStockPrices200Response, Stock } from '@repo/api-client'

interface PaginationQueryParams {
   limit?: number
   page?: number
}
// {limit, page} = {limit: 10, page: 1}

// Define a service using a base URL and expected endpoints
export const stocksApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:5001/api/v0/stocks' }),
  reducerPath: 'stocksApi',
  // Tag types are used for caching and invalidation.
  tagTypes: ['Stocks'],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `StocksApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    listStocks: build.query<ListStocks200Response, number>({
      query: (limit = 10, page = 1) => `?limit=${limit}&page=${page}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: 'Stocks', id }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `stocksApiSlice.endpoints.getStocks.useQuery`
export const { useListStocksQuery } = stocksApiSlice
